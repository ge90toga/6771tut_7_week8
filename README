<h2>CS6771 Tutorial 2016</h2>
<h2>Week Eight</h2>

<h3>Class Templates</h3>

<!--<strong>Topics Covered:</strong>
<ul><li>Exception Handling</li>
<li>Lamda Functions</li>
<li>Shared and Weak Pointers</li> 
<li>Unique Pointers and Ownership</li>
<li>Trailing Return Types</li>
</ul>-->

<ol>
<li><strong>Download</strong> the following starter code: <a href="Library.hpp">Library.hpp</a> <a href="week8.cpp">week8.cpp</a></li>	
<li><strong>Consider</strong> the design of a library. A library may hold books, movies, or some other collection of objects. 
Each object is stored in the library. 
Additionally each object in the library may have some related works (e.g., related books or movies - of the same type as the library) with a description describing why they are related.
Related works between two objects are not transitive, that is, if item A is related to item B, item B may not be related to item A.
The starter code encapsulates these key requirements.</li>
<li><strong>Read</strong> through the starter code and ensure that you understand the relationships between the classes and the use of nested classes, smart pointers, and lamda functions.</li>
<li><strong>Compile</strong> the starter code using the command
<pre>
g++ -std=c++11 -Wall -Werror week8.cpp -o week8
</pre></li>
<li><Strong>The expected output</Strong> of the week8.cpp file is: 
<pre>
Percy Jackson - Percy Jackson is a similar childrens book that readers of Harry Potter may like
confirming that Percy Jackson is in library: true
number of items in library after removal: 1
confirming that Percy Jackson is in library: false
</pre>
<strong>However,</strong> there are some missing functionality and bugs in the starter code. The current output is:
<pre>
Percy Jackson - Percy Jackson is a similar childrens book that readers of Harry Potter may like
confirming that Percy Jackson is in library: true
number of items in library after removal: 2
confirming that Percy Jackson is in library: true
Percy Jackson - Percy Jackson is a similar childrens book that readers of Harry Potter may like
</pre>
<strong>The most apparent bug in the current output</strong> is that items are not being removed from the library and extra content is being printed as a result.</li>
<li><strong>Correct the remove function</strong> to ensure that the item is removed from the library (Hint: pass an iterator to the item to items.erase()).</li>
<li>A new bug will have now appeared where despite removing the item from the library the related works object is still being printed. <br />
<strong>Modify the RelatedWork class</strong> to ensure that if an item is removed from the library that it is removed from memory (hint: use a weak_ptr rather than a complex algorithm to find all references to the item).</li>
<li>When we compile and/or run the code now we may get an error or segmentation fault. <strong>Correct the function printRelated</strong> to correctly lock and check the weak_ptr before dereferencing.
</li>
<li><strong>Another problem</strong> with the functionality of the program is we can add multiple duplicate objects, e.g.,
<pre>
bookLibrary.add(harryPotter);
bookLibrary.add(harryPotter);
bookLibrary.add(harryPotter);
bookLibrary.add(harryPotter);</pre>
<strong>Modify</strong> the addItem function to check that the item doesn't already exist in the library.</li>
<li><strong>Furthermore</strong> ensure that the following code doesn't insert multiple duplicate books as the book objects should be unique in the library:
<pre>
Book harryPotter{"Harry Potter"};
Book harryPotter1{"Harry Potter"};
Book harryPotter2{"Harry Potter"};
bookLibrary.add(harryPotter);
bookLibrary.add(harryPotter2);
bookLibrary.add(harryPotter3);
</pre>
</li>
<li><strong>Discuss</strong> other designs for this system. In particular, are there benefits/disadvantages to using the private inner classes (think about encapsulation and object scope)? Are there benefits/disadvantages to wrapping T objects in ItemContainer objects?</li>
<li><strong>Create the Movie class</strong> and test that you can create a library of Movie objects.</li>
<li><strong>Try</strong> to use the library for containers of other types (maybe a Toy library, or a Library of Library Objects?).</li>
</ul>
